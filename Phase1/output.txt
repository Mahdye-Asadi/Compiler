program      <PROGRAM_KW, ->
prg1         <ID, 1>        
;            <SEMICOLON, -> 
integer      <INTEGER_KW, ->
num          <ID, 2>        
,            <COMMA, ->     
divisor      <ID, 3>        
,            <COMMA, ->     
quotient     <ID, 4>        
;            <SEMICOLON, -> 
begin        <BEGIN_KW, ->  
num          <ID, 2>        
:=           <ASSIGN_OP, -> 
61           <NUMBER, 5>    
;            <SEMICOLON, -> 
divisor      <ID, 3>        
:=           <ASSIGN_OP, -> 
2            <NUMBER, 6>    
;            <SEMICOLON, -> 
quotient     <ID, 4>        
:=           <ASSIGN_OP, -> 
0            <NUMBER, 7>    
;            <SEMICOLON, -> 
if           <IF_KW, ->     
num          <ID, 2>        
=            <EQ_OP, ->     
1            <NUMBER, 8>    
then         <THEN_KW, ->   
return       <RETURN_KW, -> 
false        <FALSE_KW, ->  
;            <SEMICOLON, -> 
else         <ELSE_KW, ->   
if           <IF_KW, ->     
num          <ID, 2>        
=            <EQ_OP, ->     
2            <NUMBER, 6>    
then         <THEN_KW, ->   
return       <RETURN_KW, -> 
true         <TRUE_KW, ->   
;            <SEMICOLON, -> 
while        <WHILE_KW, ->  
divisor      <ID, 3>        
<=           <LE_OP, ->     
(            <LEFT_PA, ->   
num          <ID, 2>        
/            <DIV_OP, ->    
2            <NUMBER, 6>    
)            <RIGHT_PA, ->  
do           <DO_KW, ->     
begin        <BEGIN_KW, ->  
quotient     <ID, 4>        
:=           <ASSIGN_OP, -> 
num          <ID, 2>        
/            <DIV_OP, ->    
divisor      <ID, 3>        
;            <SEMICOLON, -> 
if           <IF_KW, ->     
divisor      <ID, 3>        
*            <MUL_OP, ->    
quorient     <ID, 9>        
=            <EQ_OP, ->     
num          <ID, 2>        
then         <THEN_KW, ->   
return       <RETURN_KW, -> 
false        <FALSE_KW, ->  
;            <SEMICOLON, -> 
divisor      <ID, 3>        
:=           <ASSIGN_OP, -> 
divisor      <ID, 3>        
+            <ADD_OP, ->    
=            <EQ_OP, ->     
1            <NUMBER, 8>    
;            <SEMICOLON, -> 
end          <END_KW, ->    
;            <SEMICOLON, -> 
return       <RETURN_KW, -> 
true         <TRUE_KW, ->   
;            <SEMICOLON, -> 
end          <END_KW, ->    
;            <SEMICOLON, -> 
